@use '../util/media';
@use 'sass:math';

$class: '.container, ';
$counter: 0;

@each $size,
$val in media.$breakpoints {
    @if ($counter==length(media.$breakpoints)) {
        $class: $class + '.container-'+ $size;
    }

    @else {
        $class: $class + ', .container-'+ $size + ', ';
    }
}

#{$class} {
    width: 100%;
    padding-left: 1rem;
    padding-right: 1rem;
    margin-left: auto;
    margin-right: auto;
}

$prefixIterator: 1;
$prefixes: ('sm', 'md', 'lg', 'xl', 'xxl');

@each $key,
$class in media.$point {
    $value: map-get(media.$breakpoints, $key);

    @media (min-width: $value) {
        #{$class} {
            max-width: $value - 32px;
        }
    }

    $prefixes: $prefixes+1;
}

.row {
    display: -webkit-box;
    display: -webkit-flex;
    display: flex;
    -webkit-flex-wrap: wrap;
    flex-wrap: wrap;
    margin-left: -16px;
    margin-right: -16px;
}

.row-no-margin {
    margin-left: 0;
    margin-right: 0;
}

.row-no-padding > [class*="col"] {
    padding-left: 0 !important;
    padding-right: 0 !important;
}

@for $i from 1 through 6 {
    $result: math.div(100, $i) + '%';
    .row-cols-#{$i} > * {
        width: unquote($result);
    }
}

@each $key,
$value in media.$breakpoints {

    @media (min-width: $value) {
        .row-#{$key}-no-margin {
            margin-left: 0;
            margin-right: 0;
        }
        
        .row-#{$key}-no-padding > [class*="col"] {
            padding-left: 0 !important;
            padding-right: 0 !important;
        }

        @for $i from 1 through 6 {
            $result: math.div(100, $i) + '%';
            .row-#{$key}-cols-#{$i}>* {
                width: unquote($result);
            }
        }
    }
}

$col-class: '.col, .col-auto, ';

@for $i from 1 through 13 {
    @if ($i==13) {
        @each $key, $val in media.$breakpoints {
            @for $j from 1 through 12 {
                $col-class: $col-class + '.col-' + $key + '-' + $j + ', ';
            }
        }
        #{$col-class} {
            width: 100%;
            padding-left: 16px;
            padding-right: 16px;
            position: relative;
        }
    } @else {
        $col-class: $col-class + '.col-' + $i + ', ';
    }
}

@for $i from 1 through 12 {
    .col-#{$i} {
        max-width: 8.33333333% * $i;
    }
}

@for $i from 1 through 12 {
    .offset-#{$i} {
        max-width: 8.33333333% * $i;
    }
}

.order-first {
    -webkit-box-ordinal-group: 0;
    -webkit-order: -1;
            order: -1;
}

@for $i from -1 through 12 {
    .order-#{$i} {
        -webkit-box-ordinal-group: $i;
        -webkit-order: $i;
                order: $i;
    }
}

.order-last {
    -webkit-box-ordinal-group: 14;
    -webkit-order: 13;
            order: 13;
}

@each $key, $val in media.$breakpoints {
    @media (min-width: $val) {
        @for $i from 1 through 12 {
            .col-#{$key}-#{$i} {
                max-width: 8.33333333% * $i;
            }
        }
        @for $i from 1 through 12 {
            .offset-#{$key}-#{$i} {
                max-width: 8.33333333% * $i;
            }
        }

        @for $i from -1 through 13 {
            @if ($i == -1) {
                .order-#{$key}-first {
                    -webkit-box-ordinal-group: $i;
                    -webkit-order: $i;
                            order: $i;
                }
            } @else {
                @if ($i == 13) {
                    .order-#{$key}-last {
                        -webkit-box-ordinal-group: $i;
                        -webkit-order: $i;
                                order: $i;
                    }
                } @else {
                    .order-#{$key}-#{$i} {
                        -webkit-box-ordinal-group: $i;
                        -webkit-order: $i;
                                order: $i;
                    }
                }
            }
        }
        
    }
}