@use '../util/media';
@use 'sass:math';

$class: '.container, .container-fluid, ';
$counter: 0;

@each $size,
$val in media.$breakpoints {
    @if ($counter==length(media.$breakpoints)) {
        $class: $class + '.container-'+ $size;
    }

    @else {
        $class: $class + ', .container-'+ $size + ', ';
    }
}

#{$class} {
    width: 100%;
    padding-left: 16px;
    padding-right: 16px;
    margin-left: auto;
    margin-right: auto;
}

$prefixIterator: 1;
$prefixes: ('sm', 'md', 'lg', 'xl', 'xxl');

@each $key,
$class in media.$point {
    $value: map-get(media.$breakpoints, $key);

    @media (min-width: $value) {
        #{$class} {
            max-width: $value - 32px;
        }
    }

    $prefixes: $prefixes+1;
}

.row {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    margin-left: -16px;
    margin-right: -16px;
}

.no-spacing {
    margin-left: 0;
    margin-right: 0;
}

.no-spacing>.col,
.no-spacing>[class*="col"] {
    padding-left: 0 !important;
    padding-right: 0 !important;
}

$col-class: '.col, ';

.col,
.col-auto {
    position: relative;
    width: 100%;
    padding-left: 16px;
    padding-right: 16px;
}

$col-auto-max: 1;

@for $i from 1 through 13 {
    @if ($i==13) {
        $class: '';

        @each $key,
        $val in media.$breakpoints {
            @for $j from 1 through 12 {
                $col-class: $col-class + '.col-'+ $key + '-'+ $j + ', ';
            }

            @if ($col-auto-max==length(media.$breakpoints)) {
                $class: $class + ', .col-auto';
            }

            @else {
                $class: $class + '.col-'+ $key + '-auto, ';
            }

            $col-auto-max: $col-auto-max+1;
            
        }

        $col-class: $col-class+$class;

        #{$col-class} {
            width: 100%;
            padding-left: 16px;
            padding-right: 16px;
            position: relative;
            -webkit-transition: 0.15s ease-in-out;
            -o-transition: 0.15s ease-in-out;
            transition: 0.15s ease-in-out;
        }
    }

    @else {
        $col-class: $col-class + '.col-'+ $i + ', ';
    }

    
}

.col {
    -ms-flex-preferred-size: 0;
        flex-basis: 0;
    -webkit-box-flex: 1;
        -ms-flex-positive: 1;
            flex-grow: 1;
    max-width: 100%;
}

@for $i from 1 through 6 {
    $result: math.div(100, $i) + '%';

    .row-cols-#{$i}>* {
        -webkit-box-flex: 0;
            -ms-flex: 0 0 unquote($result);
                flex: 0 0 unquote($result);
        width: unquote($result);
    }
}

@for $i from 1 through 12 {
    .col-#{$i} {
        -webkit-box-flex: 0;
            -ms-flex: 0 0 8.333333333333333% * $i;
                flex: 0 0 8.333333333333333% * $i;
        max-width: 8.333333333333333% * $i;
    }
}

.col-auto {
    -webkit-box-flex: 0;
        -ms-flex: 0 0 auto;
            flex: 0 0 auto;
    width: auto;
    max-width: 100%;
}

@for $i from 1 through 12 {
    .offset-#{$i} {
        max-width: 8.333333333333333% * $i;
    }
}

.order-first {
    -webkit-box-ordinal-group: 0;
        -ms-flex-order: -1;
            order: -1;
}

.order-last {
    -webkit-box-ordinal-group: 14;
        -ms-flex-order: 13;
            order: 13;
}

@for $i from -1 through 12 {
    .order-#{$i} {
        -webkit-box-ordinal-group: $i;
            -ms-flex-order: $i;
                order: $i;
    }
}

@each $key,
$val in media.$breakpoints {
    @media (min-width: $val) {
        .no-spacing-#{$key} {
            margin-left: 0;
            margin-right: 0;
        }

        .no-spacing-#{$key}>.col,
        .no-spacing-#{$key}>[class*="col"] {
            padding-left: 0 !important;
            padding-right: 0 !important;
        }

        .col-#{$key},
        .col-#{$key}-auto {
            position: relative;
            width: 100%;
            padding-left: 16px;
            padding-right: 16px;
        }

        @for $i from 1 through 6 {
            $result: math.div(100, $i) + '%';

            .row-#{$key}-cols-#{$i}>* {
                -webkit-box-flex: 0;
                    -ms-flex: 0 0 unquote($result);
                        flex: 0 0 unquote($result);
                width: unquote($result);
            }
        }

        @for $i from 1 through 12 {
            .col-#{$key}-#{$i} {
                -webkit-box-flex: 0;
                    -ms-flex: 0 0 8.333333333333333% * $i;
                        flex: 0 0 8.333333333333333% * $i;
                max-width: 8.333333333333333% * $i;
            }
        }

        .col-#{$key}-auto {
            -webkit-box-flex: 0;
                -ms-flex: 0 0 auto;
                    flex: 0 0 auto;
            width: auto;
            max-width: 100%;
        }

        @for $i from 1 through 12 {
            .offset-#{$key}-#{$i} {
                max-width: 8.333333333333333% * $i;
            }
        }

        .order-#{$key}-first {
            -webkit-box-ordinal-group: 0;
                -ms-flex-order: -1;
                    order: -1;
        }

        .order-#{$key}-last {
            -webkit-box-ordinal-group: 14;
                -ms-flex-order: 13;
                    order: 13;
        }

        @for $i from -1 through 12 {
            .order-#{$key}-#{$i} {
                -webkit-box-ordinal-group: $i;
                    -ms-flex-order: $i;
                        order: $i;
            }
        }
    }
}